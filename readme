EPAMSS: Equilibrium Plasma Accelerator Multiple Scattering Simulator
Claire Hansel
If you have any questions email me at clairehansel3@gmail.com

1) Installation

Installation requires the following:
• A C++17 compatible compiler
• MPI (any implementation is OK as long as it works with boost.MPI)
• boost (make sure that the boost.MPI and boost.Math libraries are built)
To build EPAMSS, run 'make' to build the executable 'epamss'.

2) Running Simulations

Each simulation requires an input file which is described in section 3. The
command 'mpirun -np CORES /PATH/TO/EPAMSS /PATH/TO/INPUT' runs a simulation
where CORES is the number of cores (which must be at least 2). A simulation will
generate an output file, a statistics file. If output_phase_space is set to true
in the input file, a phase space file will also be generated as part of the
output. Section 5 details how to use the python helper scripts including run.py
which simplifies running simulations. Section 6 details how to run a basic
example simulation.

3) Input File Format

An input file is a plain text file where each line is of the form
"PARAMETER = VALUE". VALUE must be the correct type for the parameter (for
example 1.5e+24 is an allowed value of 'rho_ion_si' but not 'particles_target'
because 'rho_ion_si' must be a real number and 'particles_target' must be an
integer. The following parameters must be specified (in any order):

• rho_ion_si (real number, units m^-3)
  The maximum number density of plasma ions. Since the plasma ions follow a
  Bennett distribution, this maximum density occurs on axis at r=0.
• plasma_length_si (real number, units: m)
  The length of the plasma.
• beam_energy_initial_gev (real number, units: GeV)
  The energy of electrons in the beam.
• acceleration_gradient_gev_per_m (real number, units: GeV/m)
  Acceleration gradient. All particles are accelerated by a uniform electric
  field.
• bennett_radius_initial_si (real number, units: m)
  The Bennett radius of the beam electron and the plasma ion distributions.
• cross_section_radius_si (real number, units: m)
  The length scale of beam electron-plasma ion coulomb scattering. The electron
  ion scattering cross section is given by pi * interaction_radius^2.
• unperturbed_plasma_density_si (real number, units: m^-3)
  The plasma density n0
• integration_tolerance (real number) (recommended: 1e-10)
  The tolerance of the numerical integrations used to create the probability
  density function of the multiple scattering angular distribution.
• vartheta_cutoff
  The parameter vartheta ranges from zero to infinity, but in order to use an
  evenly spaced spline a cutoff value must be chosen. A value of 10 is fine for
  pretty much all cases.
• drive_amplitude (real number)
  m(z) = 1 + drive_amplitude * sin(drive_angular_frequency * z). Note that
  setting this equal to zero turns off sinusoidal density modulation. Note that
  sinusoidal density modulation is ALWAYS turned off in the first simulation,
  and so this value only affects the second simulation.
• drive_angular_frequency (real number)
  m(z) = 1 + drive_amplitude * sin(drive_angular_frequency * z). Note that
  setting this equal to zero turns off sinusoidal density modulation. Normalized
  to the plasma angular wavenumber. Note that sinusoidal density modulation is
  ALWAYS turned off in the first simulation, and so this value only affects the
  second simulation.
• factor (real number)
  The ion density gaussian white noise standard deviation. Setting this to zero
  turns off gaussian white noise. Note that gaussian white noise is ALWAYS
  turned off in the first simulation, and so this value only affects the second
  simulation.
• ion_atomic_number (integer)
  The Z of the plasma ion species.
• minimum_steps_per_betatron_period (integer) (recommended: 200)
  The absolute minimum number of z steps the code uses to track a particle
  during a single betatron oscillation. This parameter is used to compute the
  step size. A value around 200 is good (and probably a little overkill) but the
  particle tracking starts to lose accuracy as you lower this parameter.
• particles_target (integer)
  The number of particles to track during the simulation. Because the number of
  particles must evenly divide into the number of compute processes, this
  parameter is usually increased by a few particles. The actual number of
  particles used in a simulation is given by the parameter 'actual_particles' in
  the output file.
• analysis_points_target (integer)
  The number of points at which statistics and possibly the phase space data are
  saved. Similar to the parameter 'particles_target', this parameter is slightly
  adjusted in order for it to divide evenly. The actual number of analysis
  points used is given by the parameter 'actual_analysis_points' in the output
  file.
• spline_points (integer) (recommended: 1000)
  Number of points at which the probability density function of the multiple
  scattering angular distribution is evaluated using numerical integration. A
  spline is then constructed to interpolate between these points.
• max_order (integer) (recommended: 3)
  The maximum order in B^-1 the probability density function of the multiple
  scattering angular distribution is computed to. If this parameter is 0, then
  a gaussian approximation will be used and the parameters
  'integration_tolerance', 'vartheta_cutoff', 'spline_points', and
  'max_integration_depth' will no longer matter.
• max_integration_depth (integer) (recommended: 15)
  Maximum number of recursion allowed in adaptive numerical integration when
  evaluating the probability density function of the multiple scattering angular
  distribution.
• output_filename (path)
  The path at which to generate the output file. If a file already exists here
  it will be overwritten.
• statistics_filename (path)
  The path at which to generate the statistics file. If a file already exists
  here it will be overwritten.
• phase_space_filename (path)
  Each process outputs its phase space data at the path given by
  'phase_space_filename' appended with an underscore and then the rank of the
  process. Note that the main process has rank 0 and does not output a phase
  space file, and the ranks of the compute processes begin at 1.
• output_phase_space (bool)
  Whether or not to generate phase space data. This parameter should be equal to
  either "true" or "false". Note that generating phase space data does increase
  the time the simulation takes and may generate a lot of data.
• modified_bennett (bool) (recommended: True)
  This should be set to true.
• scattering2 (bool)
  Whether or not to enable scattering in the second simulation. Scattering is
  ALWAYS disabled in the first simulation.

One parameter is optional and may or may not be included:

• seed (integer, optional)
  The seed for the random number generator. If this is not specified, the value
  std::time(nullptr) is automatically used. Two simulations with the same seed
  and the same input parameters run by the same executable should produce the
  same data. WARNING: this is only true with simulations run with the same
  number of cores. Each individual process uses a different seed which is based
  on the process number and the parameter 'seed'.

4) Output Files

The simulation generates two or three outputs: the output file, the statistics
file, and a number of phase space files which are only generated if
'output_phase_space' is set to 'true'. The output file is the same format as the
input file except it has the following extra parameters (in no particular
order) which are mostly computed using simple analytical formulae from the
input file:

• seed
  If the seed is not specified in the input file, it is set to
  std::time(nullptr). Otherwise this has the same value as in the input file.
• plasma_frequency_si
• plasma_angular_wavenumber_si
• plasma_skin_depth_si
• rho_ion_div_n0
• plasma_length
• gamma_initial
• gamma_prime
• bennett_radius_initial
• delta
  Should be equal to 1
• betatron_frequency_initial
  Betatron frequency for r << a, z = 0 (for all z if there is no acceleration)
• betatron_period_initial
• betatron_frequency_initial_si
• betatron_period_initial_si
• bennett_radius_final
• betatron_frequency_final
• betatron_period_final
• betatron_frequency_final_si
• betatron_period_final_si
• step_size
• step_size_si
• gamma_minimum_angle
  gamma * theta_min
• omega_off_axis
  Omega (see scattering equations) for r >> a
• omega_on_axis_initial
  Omega (see scattering equations) for r << a for z = 0 (for all z if there is
  no acceleration)
• max_scattering_r_div_a_initial
  The value X such that for r greater than X bennett radii, no scattering
  kick is computed since omega < 25
• sigma_r
• sigma_r_prime_initial
  The equilibrium r' standard deviation. Also equal to the standard deviation of
  r * theta'.
• steps (integer)
  The total number of steps in the simulation.
• stride (integer)
  If this has value 1, the statistics and possibly phase space data are saved
  every step. If this has value 2, they are saved every 2 steps, etc.
• actual_particles (integer)
  The actual number of particles in the simulation.
• particles_per_process (integer)
  The number of particles per core.
• compute_processes (integer)
  The number of cores tracking particles. Equal to the total number of processes
  minus one (for the main process which doesn't track particles).
• actual_analysis_points (integer)
  The actual number of points at which statistics and possibly the phase space
  data are saved.
• seconds_elapsed (real, units: seconds)
  Number of seconds the simulation took.
• minutes_elapsed (real, units: minutes)
  Number of minutes the simulation took.
• hours_elapsed (real, units: hours)
  Number of hours the simulation took.
• approx_core_hours_elapsed (real, units: cores * hours)
  The number of hours the simulation took times the number of compute processes.
  If this value is for example 10, the simulation takes approximately 10 hours
  on one core or one hour on ten cores. Note that in general the speedup is not
  linear and so this is just an approximation.

The statistics file is a binary array of doubles. The array is a 3D array with
dimensions (2, actual_analysis_points, 14). The first dimension indicates
whether or not scattering is enabled, if it is 1 (0 if indexing starts at 0)
then scattering is not enabled. If it is 2 (1 if indexing starts at 0) then
scattering is enabled. The next dimension indicates which analysis point the
data were taken at. Finally the last dimension indicates which statistic is
wanted, where the statistics are (in order): Mean(x), Mean(x'), Mean(y),
Mean(y'), Cov(x, x), Cov(x, x'), Cov(x, y), Cov(x, y'), Cov(x', x'), Cov(x', y),
Cov(x', y'), Cov(y, y), Cov(y, y'), and Cov(y', y').

Each compute process outputs a phase space file. A phase space file is a binary
array of doubles. The array is a 4D array with dimensions (2,
actual_analysis_points, particles_per_process, 4). The first dimension indicates
whether or not scattering is enabled, if it is 1 (0 if indexing starts at 0)
then scattering is not enabled. If it is 2 (1 if indexing starts at 0) then
scattering is enabled. The next dimension indicates which analysis point the
data were taken at. The next dimension indicates which particle the data
correspond to. Finally the last dimension indicates which phase space value is
wanted, where the phase space values are (in order): x, x', y, y'.

5) Using Python Helper Scripts

Two Python helper scripts are provided: run.py and analyze.py. run.py generates
an input file and then runs EPAMSS. analyze.py reads data files and produces
plots of emittance growth. analyze.py includes a number of helpful functions and
is designed to be modified.
